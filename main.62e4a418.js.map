{"version":3,"sources":["scripts/main.js"],"names":["BUTTON_CLASS","FIELD_ROW_CLASS","FIELD_CELL_CLASS","GAME_SCORE_CLASS","START_MESSAGE_CLASS","LOSE_MESSAGE_CLASS","WIN_MESSAGE_CLASS","HIDDEN_CLASS","RESTART_TEXT","START_TEXT","RESTART_CLASS","toLocaleLowerCase","START_CLASS","toLocaleUpperCase","FIELD_SIZE","WIN_SCORE","BaseClass","setSelectors","buttonEl","document","querySelector","fieldRowsEl","getElementsByClassName","gameScoreEl","loseMessageEl","winMessageEl","startMessageEl","score","isGameOver","isGameStart","fields","Array","fill","map","classList","contains","add","textContent","remove","setRandomNumbers","addKeydownListener","setInitData","removeKeydownListener","forEach","row","rowIndex","fieldRows","cell","cellIndex","cells","className","possibilityToContinue","filter","some","isSameNextCell","nextRow","isSameCellNextRow","length","freeRows","checkForPossibilityToContinue","Math","floor","random","getRandomIndex","cellValue","getRandomIndexes","Move","isCellMoved","prevCellIndex","value","columnIndex","prevColumnIndex","index","prevCell","setNewRowValues","setPrevRowValues","setNewColumnValues","setPrevColumnValues","Game","handleButtonClick","bind","handleKeydown","addEventListener","key","goDown","goLeft","goUp","goRight","updateCells","updateScore","checkIfGameIsOver","removeEventListener","startGame","restartGame","newGame","init"],"mappings":"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","file":"main.62e4a418.js","sourceRoot":"../src","sourcesContent":["'use strict'\n\nconst BUTTON_CLASS = '.start';\nconst FIELD_ROW_CLASS = 'field-row';\nconst FIELD_CELL_CLASS = 'field-cell';\nconst GAME_SCORE_CLASS = '.game-score';\nconst START_MESSAGE_CLASS = '.message-start';\nconst LOSE_MESSAGE_CLASS = '.message-lose';\nconst WIN_MESSAGE_CLASS = '.message-win';\nconst HIDDEN_CLASS = 'hidden';\n\nconst RESTART_TEXT = 'Restart';\nconst START_TEXT = 'Start';\n\nconst RESTART_CLASS = RESTART_TEXT.toLocaleLowerCase();\nconst START_CLASS = START_TEXT.toLocaleUpperCase();\n\nconst FIELD_SIZE = 4;\nconst WIN_SCORE = 2048;\n\nclass BaseClass {\n  constructor() {\n    this.setSelectors();\n  }\n\n  setSelectors() {\n    this.buttonEl = document.querySelector(BUTTON_CLASS);\n    this.fieldRowsEl = document.getElementsByClassName(FIELD_ROW_CLASS);\n    this.gameScoreEl = document.querySelector(GAME_SCORE_CLASS);\n    this.loseMessageEl = document.querySelector(LOSE_MESSAGE_CLASS);\n    this.winMessageEl = document.querySelector(WIN_MESSAGE_CLASS);\n    this.startMessageEl = document.querySelector(START_MESSAGE_CLASS);\n  }\n\n  setInitData() {\n    this.score = 0;\n    this.isGameOver = false;\n    this.isGameStart = false;\n\n    this.fields = Array(FIELD_SIZE).fill([]).map(() => (\n      Array(FIELD_SIZE).fill(0)\n    ));\n\n    if (!this.loseMessageEl.classList.contains(HIDDEN_CLASS)) {\n      this.loseMessageEl.classList.add(HIDDEN_CLASS);\n    }\n\n    if (!this.winMessageEl.classList.contains(HIDDEN_CLASS)) {\n      this.winMessageEl.classList.add(HIDDEN_CLASS);\n    }\n  }\n\n  startGame() {\n    this.buttonEl.textContent = RESTART_TEXT;\n    this.buttonEl.classList.remove(START_CLASS);\n    this.startMessageEl.classList.add(HIDDEN_CLASS);\n    this.buttonEl.classList.add(RESTART_CLASS);\n\n    this.setRandomNumbers();\n    this.setRandomNumbers();\n    this.addKeydownListener();\n  }\n\n  restartGame() {\n    this.buttonEl.textContent = START_TEXT;\n    this.buttonEl.classList.remove(RESTART_CLASS);\n    this.buttonEl.classList.add(START_CLASS);\n    this.startMessageEl.classList.remove(HIDDEN_CLASS);\n\n    this.setInitData();\n\n    this.removeKeydownListener();\n  }\n\n  updateScore() {\n    this.gameScoreEl.textContent = this.score;\n  }\n\n  updateCells() {\n    this.fields.forEach((row, rowIndex) => {\n      const fieldRows = this.fieldRowsEl[rowIndex];\n\n      row.forEach((cell, cellIndex) => {\n        const cells\n          = fieldRows.getElementsByClassName(FIELD_CELL_CLASS)[cellIndex];\n\n        cells.className = FIELD_CELL_CLASS;\n        cells.textContent = cell || '';\n\n        if (cell) {\n          cells.classList.add(`${FIELD_CELL_CLASS}--${cell}`);\n        }\n      });\n    });\n  }\n\n  checkForPossibilityToContinue() {\n    const possibilityToContinue = this.fields.filter((row, rowIndex) => (\n      row.some((cell, cellIndex) => {\n        if (!cell) {\n          return false;\n        }\n\n        const isSameNextCell = cell === row[cellIndex + 1];\n        const nextRow = this.fields[rowIndex + 1];\n        const isSameCellNextRow = nextRow && cell === nextRow[cellIndex];\n\n        return isSameNextCell || isSameCellNextRow;\n      })\n    ));\n\n    return possibilityToContinue.length;\n  }\n\n  checkIfGameIsOver() {\n    const freeRows = this.fields.filter((row) => row.some((cell) => !cell));\n    const winFieldsRow = this.fields.filter((row) => row.some((cell) => (\n      cell === WIN_SCORE\n    )));\n\n    if (winFieldsRow.length) {\n      this.winMessageEl.classList.remove(HIDDEN_CLASS);\n      this.isGameOver = true;\n    }\n\n    if (!freeRows.length && !this.checkForPossibilityToContinue()) {\n      this.loseMessageEl.classList.remove(HIDDEN_CLASS);\n      this.isGameOver = true;\n    }\n  }\n\n  getRandomIndex() {\n    return Math.floor(Math.random() * FIELD_SIZE);\n  }\n\n  getRandomIndexes() {\n    const [rowIndex, cellIndex]\n      = [this.getRandomIndex(), this.getRandomIndex()];\n    const cellValue = this.fields[rowIndex][cellIndex];\n\n    if (cellValue) {\n      return this.getRandomIndexes();\n    } else {\n      return [rowIndex, cellIndex];\n    }\n  }\n\n  setRandomNumbers() {\n    const [rowIndex, cellIndex] = this.getRandomIndexes();\n\n    this.fields[rowIndex][cellIndex] = 2;\n  }\n}\n\nclass Move extends BaseClass {\n  constructor() {\n    super();\n\n    this.isCellMoved = false;\n  }\n\n  setNewRowValues({ cell, rowIndex, cellIndex, prevCellIndex }) {\n    const value = cell * 2;\n\n    this.fields[rowIndex][prevCellIndex] = value;\n    this.fields[rowIndex][cellIndex] = 0;\n\n    this.score += value;\n  }\n\n  setNewColumnValues({ cell, columnIndex, prevColumnIndex, cellIndex }) {\n    const value = cell * 2;\n\n    this.fields[prevColumnIndex][cellIndex] = value;\n    this.fields[columnIndex][cellIndex] = 0;\n\n    this.score += value;\n  }\n\n  setPrevRowValues({ cell, rowIndex, cellIndex, index }) {\n    this.fields[rowIndex][index] = cell;\n\n    if (index !== cellIndex) {\n      this.fields[rowIndex][cellIndex] = 0;\n    }\n  }\n\n  setPrevColumnValues({ cell, columnIndex, cellIndex, index }) {\n    this.fields[index][cellIndex] = cell;\n\n    if (index !== columnIndex) {\n      this.fields[columnIndex][cellIndex] = 0;\n    }\n  }\n\n  goLeft() {\n    for (let rowIndex = 0; rowIndex < FIELD_SIZE; rowIndex++) {\n      let index = 0;\n\n      for (let cellIndex = 0; cellIndex < FIELD_SIZE; cellIndex++) {\n        const cell = this.fields[rowIndex][cellIndex];\n        const prevCell = this.fields[rowIndex][index - 1];\n\n        if (!cell) {\n          continue;\n        }\n\n        if (cell && index === cellIndex && prevCell !== cell) {\n          index++;\n          continue;\n        }\n\n        if (index && prevCell === cell) {\n          this.setNewRowValues({\n            cell, rowIndex, cellIndex, prevCellIndex: index - 1,\n          });\n        } else {\n          this.setPrevRowValues({\n            cell, rowIndex, cellIndex, index,\n          });\n          index++;\n        }\n\n        this.isCellMoved = true;\n      }\n    }\n  }\n\n  goRight() {\n    for (let rowIndex = FIELD_SIZE - 1; rowIndex >= 0; rowIndex--) {\n      let index = FIELD_SIZE - 1;\n\n      for (let cellIndex = FIELD_SIZE - 1; cellIndex >= 0; cellIndex--) {\n        const cell = this.fields[rowIndex][cellIndex];\n        const prevCell = this.fields[rowIndex][index + 1];\n\n        if (!cell) {\n          continue;\n        }\n\n        if (cell && index === cellIndex && prevCell !== cell) {\n          index--;\n          continue;\n        }\n\n        if (index !== FIELD_SIZE - 1 && prevCell === cell) {\n          this.setNewRowValues({\n            cell, rowIndex, cellIndex, prevCellIndex: index + 1,\n          });\n        } else {\n          this.setPrevRowValues({\n            cell, rowIndex, cellIndex, index,\n          });\n          index--;\n        }\n\n        this.isCellMoved = true;\n      }\n    }\n  }\n\n  goUp() {\n    for (let cellIndex = 0; cellIndex < FIELD_SIZE; cellIndex++) {\n      let index = 0;\n\n      for (let columnIndex = 0; columnIndex < FIELD_SIZE; columnIndex++) {\n        const cell = this.fields[columnIndex][cellIndex];\n        const prevCell = index ? this.fields[index - 1][cellIndex] : null;\n\n        if (!cell) {\n          continue;\n        }\n\n        if (cell && index === columnIndex && prevCell !== cell) {\n          index++;\n          continue;\n        }\n\n        if (index && prevCell === cell) {\n          this.setNewColumnValues({\n            cell, columnIndex, prevColumnIndex: index - 1, cellIndex,\n          });\n        } else {\n          this.setPrevColumnValues({\n            cell, columnIndex, cellIndex, index,\n          });\n          index++;\n        }\n\n        this.isCellMoved = true;\n      }\n    }\n  }\n\n  goDown() {\n    for (let cellIndex = FIELD_SIZE - 1; cellIndex >= 0; cellIndex--) {\n      let index = FIELD_SIZE - 1;\n\n      for (let columnIndex = FIELD_SIZE - 1; columnIndex >= 0; columnIndex--) {\n        const cell = this.fields[columnIndex][cellIndex];\n        const prevCell\n          = index !== FIELD_SIZE - 1 ? this.fields[index + 1][cellIndex] : null;\n\n        if (!cell) {\n          continue;\n        }\n\n        if (cell && index === columnIndex && prevCell !== cell) {\n          index--;\n          continue;\n        }\n\n        if (index !== FIELD_SIZE - 1 && prevCell === cell) {\n          this.setNewColumnValues({\n            cell, columnIndex, prevColumnIndex: index + 1, cellIndex,\n          });\n        } else {\n          this.setPrevColumnValues({\n            cell, columnIndex, cellIndex, index,\n          });\n          index -= 1;\n        }\n\n        this.isCellMoved = true;\n      }\n    }\n  }\n}\n\nclass Game extends Move {\n  constructor() {\n    super();\n    this.handleButtonClick = this.handleButtonClick.bind(this);\n    this.handleKeydown = this.handleKeydown.bind(this);\n  }\n\n  init() {\n    this.setInitData();\n    this.buttonEl.addEventListener('click', this.handleButtonClick);\n  }\n\n  handleKeydown({ key }) {\n    this.isCellMoved = false;\n\n    switch (key) {\n      case 'ArrowDown':\n        this.goDown();\n        break;\n\n      case 'ArrowLeft':\n        this.goLeft();\n        break;\n\n      case 'ArrowUp':\n        this.goUp();\n        break;\n\n      case 'ArrowRight':\n        this.goRight();\n        break;\n\n      default:\n        return;\n    }\n\n    if (!this.isGameOver && this.isCellMoved) {\n      this.setRandomNumbers();\n      this.updateCells();\n      this.updateScore();\n    }\n\n    this.checkIfGameIsOver();\n  }\n\n  addKeydownListener() {\n    document.addEventListener('keydown', this.handleKeydown);\n  }\n\n  removeKeydownListener() {\n    document.removeEventListener('keydown', this.handleKeydown);\n  }\n\n  handleButtonClick() {\n    this.isGameStart = !this.isGameStart;\n\n    if (this.isGameStart) {\n      this.startGame();\n    } else {\n      this.restartGame();\n    }\n\n    this.updateCells();\n  }\n}\n\nconst newGame = new Game();\n\nnewGame.init();\n"]}